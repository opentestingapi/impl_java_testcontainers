package com.example.demo.devenv.containers;

import org.testcontainers.containers.GenericContainer;
import org.testcontainers.images.builder.ImageFromDockerfile;
import org.testcontainers.utility.DockerImageName;

import com.example.demo.devenv.util.OtaLogConsumer;

public class Opentesting extends GenericContainer<Opentesting> {

    public static final String IMAGE = "/opentestingapi/opentesting:1.40";

    private static GenericContainer<Opentesting> instance = null;

    @SuppressWarnings("resource") //testcontainers will do an automatic cleanup
    public static GenericContainer<Opentesting> getInstance(String repository) {

        if (instance == null) {
            instance = new Opentesting(DockerImageName.parse(repository+IMAGE))
                .withCreateContainerCmdModifier(cmd -> cmd.withName("testcontainers_opentesting_"+System.currentTimeMillis()))
                .withNetworkMode("host") //we do need access to other containers, we should use host network
                //need to add mapping for alias docker, required for pipeline dind usage
                .withExtraHost("docker", "127.0.0.1")
                .withEnv("SPRING_SLEUTH_SAMPLER_PERCENTAGE", "0")
                .withEnv("SPRING_ZIPKIN_ENABLED", "false")
                .withEnv("OPENTESTING_CHECKCRON", "*/5 * * * * ?") //we can execute the checks more often as default
                .withAccessToHost(true)
                .withLogConsumer(new OtaLogConsumer())
                .withReuse(false);

            //add fixed port 
            ((Opentesting) instance).configurePorts(50000, 50000);
        }

        return instance;
    }

    public Opentesting(ImageFromDockerfile withFileFromClasspath) {
        super(withFileFromClasspath);
    }

    public Opentesting(DockerImageName dockerImageName) {
        super(dockerImageName);
    }

    public void configurePorts(int hostPort, int containerPort) {
        super.addFixedExposedPort(hostPort, containerPort);        
    }
    
}
