package com.example.demo.systemtest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import static org.junit.Assert.assertTrue;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.ClassOrderer;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestClassOrder;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.yaml.snakeyaml.Yaml;

import com.example.demo.devenv.DevEnv;
import com.example.demo.systemtest.util.OpenTestingApiTester;

@TestClassOrder(ClassOrderer.OrderAnnotation.class)
@Slf4j
abstract class OpenTestingSystemTest extends OpenTestingApiTester {	

	static final String TESTFOLDER = "opentesting/";

	private static int counterPrep = 0;
	private static int counterTest = 0;

	private String properties = "n/a";

	OpenTestingSystemTest(String properties){
		this.properties = properties;
	}

	@BeforeAll
	static void beforeAll() {

		// Start testing environment
		DevEnv.init(true);

	}	

	@AfterAll
	@SneakyThrows
	static void afterAll() {

		log.info("###############################");

		for(OTATestResult otaTestResult : getTestResults()){
			log.info(otaTestResult.getResult() + "\t" +
					otaTestResult.getTestName()+ "." +
					otaTestResult.getCheckName() + "\t" +
					otaTestResult.getDescription());
		}

		// print summary
		log.info("###############################");		
		log.info("mandatory success:   " + isSummary_mandatorySuccess());
		log.info("all success:         " + isSummary_allSuccess());
		log.info("checks total:        " + getSummary_all());
		log.info("checks success:      " + getSummary_success());
		log.info("checks failed:       " + getSummary_failed());
		log.info("###############################");	
		
		// stop container
		DevEnv.stop();
	}

	@Order(1)
	@Nested	
    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
    class ExecPrep {
		
        @ParameterizedTest
        @MethodSource("getPreparationTestCases")
        @Execution(ExecutionMode.SAME_THREAD) //preparation after each other
        @SneakyThrows
		void execPrep(String test) throws IOException, InterruptedException {

			if (test == null || test.isEmpty()) return;

			counterPrep++;

			log.info("###############################");
			log.info("Preparation Test "+counterPrep+": "+test);
			log.info("###############################");

			assertTrue(test+": fail", testDefault(TESTFOLDER+test));
		}

		@SuppressWarnings("unchecked")
		@SneakyThrows		
		List<String> getPreparationTestCases() {			
			Yaml yml = new Yaml();
			Map<String, Object> data = yml.load(OpenTestingSystemTest.class.getClassLoader().getResourceAsStream(properties));
			List<String> res = (List<String>) data.get("preparationtests");
			if (res == null) {
				res = new ArrayList<>();
				res.add(""); //JUnit missing functionality workaround...
			}
			return res; 
		}
        
    }

	@Order(2)
	@Nested	
    @TestInstance(TestInstance.Lifecycle.PER_CLASS)
    class ExecTest {
		
        @ParameterizedTest
        @MethodSource("getTestCases")     
		@Execution(ExecutionMode.CONCURRENT) // test cases in parallel
		//@Execution(ExecutionMode.SAME_THREAD) //test cases after each other
		@SneakyThrows
        void execTest(String testcase) {
		
			if (testcase == null || testcase.isEmpty()) return;

			counterTest++;
	
			log.info("###############################");
			log.info("Test "+counterTest+": "+testcase);
			log.info("###############################");
	
			assertTrue(testcase+": fail", testDefault(TESTFOLDER+testcase));
		}

		@SuppressWarnings("unchecked")
		@SneakyThrows
		List<String> getTestCases() {					
			Yaml yml = new Yaml();
			Map<String, Object> data = yml.load(OpenTestingSystemTest.class.getClassLoader().getResourceAsStream(properties));
			List<String> res = (List<String>) data.get("tests");
			if (res == null) {
				res = new ArrayList<>();
				res.add(""); //JUnit missing functionality workaround...
			}
			return res; 
		}		

    }	

}