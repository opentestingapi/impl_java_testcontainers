package com.example.demo.systemtest;

import lombok.SneakyThrows;
import lombok.extern.slf4j.Slf4j;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.MethodSource;
import org.springframework.boot.test.context.SpringBootTest;

import com.example.demo.devenv.DevEnv;
import com.example.demo.systemtest.util.OpenTestingApiTester;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertTrue;

/**
 * start opentesting container, read created test cases and execute it as parametrized test
 */
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.DEFINED_PORT)
@Slf4j
class OpenTestingSystemTest extends OpenTestingApiTester {

	//resources folder to store test cases
	private static final String TESTFOLDER = "opentestingapi/";

	@BeforeAll
	private static void beforeAll() {
		
		// Start testing environment
		DevEnv.init(); 

		// lets start opentesting
		init();
	}

	@AfterAll
	@SneakyThrows
	private static void afterAll() {

		log.info("###############################");

		for(OTATestResult otaTestResult : getTestResults()){
			log.info(otaTestResult.getResult() + "\t" +
					otaTestResult.getTestName()+ "." +
					otaTestResult.getCheckName() + "\t" +
					otaTestResult.getDescription());
		}

		// print summary
		log.info("###############################");		
		log.info("mandatory success:   " + isSummary_mandatorySuccess());
		log.info("all success:         " + isSummary_allSuccess());
		log.info("checks total:        " + getSummary_all());
		log.info("checks success:      " + getSummary_success());
		log.info("checks failed:       " + getSummary_failed());
		log.info("###############################");
		
		// stop containers
		opentesting.stop();
		DevEnv.stop();
	}

	@ParameterizedTest
	@MethodSource("getTestCases")
	@SneakyThrows
	void test(String testcase) {

		log.info("###############################");
		log.info("Test: "+testcase);
		log.info("###############################");
		
		assertTrue(testcase+": fail", testDefault( TESTFOLDER+testcase+"/"));
	}

	/**
	 * read all test cases
	 * @return Llist with folders
	 */
	static List<String> getTestCases() {
		List<String> tests = new ArrayList<>();
		ClassLoader classLoader = OpenTestingSystemTest.class.getClassLoader();
		File file = new File(classLoader.getResource(TESTFOLDER).getFile());
		for (File folder : file.listFiles()) {
			if (folder.isDirectory()) tests.add(folder.getName());
		}
		Collections.sort(tests);
		return tests;
	}

	/**
	 * use this one to execute a dedicated test
	 */
	//@Test
	@SneakyThrows
	void helloworldtest() {
		assertTrue("helloworldtest: fail", testDefault( TESTFOLDER+"helloworldtest/"));
	}

	/**
	 * use this one to keep test env running
	 * @throws InterruptedException
	 */
	//@Test
	void sleep() throws InterruptedException {		
		Thread.sleep(100000000);
	}

}